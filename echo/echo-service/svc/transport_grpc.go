// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7040e72f5f
// Version Date: 2020-09-19T18:42:02Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "echo"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC EchoServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.EchoServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// echo

		echo: grpctransport.NewServer(
			endpoints.EchoEndpoint,
			DecodeGRPCEchoRequest,
			EncodeGRPCEchoResponse,
			serverOptions...,
		),
		louder: grpctransport.NewServer(
			endpoints.LouderEndpoint,
			DecodeGRPCLouderRequest,
			EncodeGRPCLouderResponse,
			serverOptions...,
		),
		louderget: grpctransport.NewServer(
			endpoints.LouderGetEndpoint,
			DecodeGRPCLouderGetRequest,
			EncodeGRPCLouderGetResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the EchoServer interface
type grpcServer struct {
	echo      grpctransport.Handler
	louder    grpctransport.Handler
	louderget grpctransport.Handler
}

// Methods for grpcServer to implement EchoServer interface

func (s *grpcServer) Echo(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {
	_, rep, err := s.echo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.EchoResponse), nil
}

func (s *grpcServer) Louder(ctx context.Context, req *pb.LouderRequest) (*pb.EchoResponse, error) {
	_, rep, err := s.louder.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.EchoResponse), nil
}

func (s *grpcServer) LouderGet(ctx context.Context, req *pb.LouderRequest) (*pb.EchoResponse, error) {
	_, rep, err := s.louderget.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.EchoResponse), nil
}

// Server Decode

// DecodeGRPCEchoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC echo request to a user-domain echo request. Primarily useful in a server.
func DecodeGRPCEchoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.EchoRequest)
	return req, nil
}

// DecodeGRPCLouderRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC louder request to a user-domain louder request. Primarily useful in a server.
func DecodeGRPCLouderRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.LouderRequest)
	return req, nil
}

// DecodeGRPCLouderGetRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC louderget request to a user-domain louderget request. Primarily useful in a server.
func DecodeGRPCLouderGetRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.LouderRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCEchoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain echo response to a gRPC echo reply. Primarily useful in a server.
func EncodeGRPCEchoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.EchoResponse)
	return resp, nil
}

// EncodeGRPCLouderResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain louder response to a gRPC louder reply. Primarily useful in a server.
func EncodeGRPCLouderResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.EchoResponse)
	return resp, nil
}

// EncodeGRPCLouderGetResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain louderget response to a gRPC louderget reply. Primarily useful in a server.
func EncodeGRPCLouderGetResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.EchoResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
