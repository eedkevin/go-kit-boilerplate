// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: echo.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package echo

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	In string `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{0}
}
func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return m.Size()
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

type LouderRequest struct {
	// In is the string to echo back
	In string `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
	// Loudness is the number of exclamations marks to add to the echoed string
	Loudness int32 `protobuf:"varint,2,opt,name=loudness,proto3" json:"loudness,omitempty"`
}

func (m *LouderRequest) Reset()         { *m = LouderRequest{} }
func (m *LouderRequest) String() string { return proto.CompactTextString(m) }
func (*LouderRequest) ProtoMessage()    {}
func (*LouderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{1}
}
func (m *LouderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LouderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LouderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LouderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LouderRequest.Merge(m, src)
}
func (m *LouderRequest) XXX_Size() int {
	return m.Size()
}
func (m *LouderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LouderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LouderRequest proto.InternalMessageInfo

func (m *LouderRequest) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *LouderRequest) GetLoudness() int32 {
	if m != nil {
		return m.Loudness
	}
	return 0
}

type EchoResponse struct {
	Out string `protobuf:"bytes,1,opt,name=out,proto3" json:"out,omitempty"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{2}
}
func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return m.Size()
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echo.EchoRequest")
	proto.RegisterType((*LouderRequest)(nil), "echo.LouderRequest")
	proto.RegisterType((*EchoResponse)(nil), "echo.EchoResponse")
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_08134aea513e0001) }

var fileDescriptor_08134aea513e0001 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4b, 0x02, 0x41,
	0x14, 0xc7, 0x9d, 0x4d, 0x45, 0xa7, 0x1f, 0xe4, 0x2b, 0x50, 0x16, 0x5a, 0x64, 0x4f, 0xd2, 0xc1,
	0x81, 0xa2, 0x4b, 0x9e, 0x92, 0xac, 0x0e, 0x1d, 0xc2, 0xa3, 0xb7, 0xd5, 0x7d, 0xb9, 0x0b, 0x3a,
	0xcf, 0x66, 0x66, 0x83, 0x88, 0x2e, 0xfd, 0x05, 0x42, 0xff, 0x54, 0x47, 0xa1, 0x4b, 0xc7, 0xd0,
	0xfe, 0x90, 0xd8, 0x1d, 0x0b, 0x03, 0x83, 0x4e, 0xf3, 0xe6, 0xcd, 0xfb, 0x7e, 0xbe, 0xdf, 0xc7,
	0x70, 0x8e, 0x83, 0x88, 0x9a, 0x13, 0x45, 0x86, 0x20, 0x9f, 0xd6, 0x6e, 0x67, 0x18, 0x9b, 0x28,
	0xe9, 0x37, 0x07, 0x34, 0x16, 0x63, 0x34, 0xc1, 0x3d, 0x2a, 0x8d, 0xc2, 0xa8, 0x44, 0x6b, 0x11,
	0xe2, 0xad, 0x51, 0x88, 0x62, 0x48, 0x34, 0x1c, 0xa1, 0x89, 0x62, 0x15, 0x4e, 0x02, 0x65, 0x1e,
	0x44, 0x20, 0x25, 0x99, 0xc0, 0xc4, 0x24, 0xb5, 0x85, 0xf9, 0x07, 0x7c, 0xb3, 0x33, 0x88, 0xa8,
	0x8b, 0x77, 0x09, 0x6a, 0x03, 0x3b, 0xdc, 0x89, 0x65, 0x8d, 0xd5, 0x59, 0xa3, 0xdc, 0x75, 0x62,
	0xe9, 0xb7, 0xf8, 0xf6, 0x35, 0x25, 0x21, 0xaa, 0x3f, 0x06, 0xc0, 0xe5, 0xa5, 0x11, 0x25, 0xa1,
	0x44, 0xad, 0x6b, 0x4e, 0x9d, 0x35, 0x0a, 0xdd, 0x9f, 0xbb, 0x5f, 0xe7, 0x5b, 0x96, 0xad, 0x27,
	0x24, 0x35, 0xc2, 0x2e, 0xdf, 0xa0, 0xc4, 0x2c, 0xc5, 0x69, 0x79, 0x34, 0x75, 0x78, 0x3e, 0x1d,
	0x81, 0x8b, 0xe5, 0x59, 0x69, 0x66, 0x8b, 0xae, 0x44, 0x72, 0x61, 0xb5, 0x65, 0x49, 0x7e, 0xf5,
	0xf9, 0xed, 0xf3, 0xc5, 0xa9, 0x40, 0x41, 0xa4, 0x6f, 0xbd, 0x12, 0x14, 0xb3, 0x42, 0x80, 0xe4,
	0x45, 0x9b, 0x17, 0xf6, 0xac, 0xec, 0x57, 0xfa, 0xb5, 0xac, 0x56, 0xc6, 0x3a, 0x69, 0xbb, 0x3c,
	0x7f, 0xd5, 0x39, 0x3b, 0x07, 0x10, 0xa3, 0x4c, 0x23, 0x1e, 0xbf, 0x17, 0x79, 0xea, 0x55, 0xfd,
	0x35, 0xdd, 0x53, 0x76, 0x08, 0x37, 0xbc, 0x6c, 0x1d, 0x2e, 0xd1, 0xfc, 0xdf, 0xd2, 0xcd, 0x2c,
	0xf7, 0xd7, 0x59, 0xb5, 0x6b, 0xaf, 0x73, 0x8f, 0xcd, 0xe6, 0x1e, 0xfb, 0x98, 0x7b, 0x6c, 0xba,
	0xf0, 0x72, 0xb3, 0x85, 0x97, 0x7b, 0x5f, 0x78, 0xb9, 0x7e, 0x31, 0xfb, 0xb1, 0xe3, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb7, 0x2c, 0x0a, 0xc8, 0x0c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	// Echo "echos" the incoming string
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Louder "echos" the incoming string with `Loudness` additional exclamation marks
	Louder(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// LouderGet is the same as Louder, but pulls fields other than Loudness (i.e. In) from query params instead of POST
	LouderGet(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/echo.Echo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Louder(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/echo.Echo/Louder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) LouderGet(ctx context.Context, in *LouderRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/echo.Echo/LouderGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	// Echo "echos" the incoming string
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Louder "echos" the incoming string with `Loudness` additional exclamation marks
	Louder(context.Context, *LouderRequest) (*EchoResponse, error)
	// LouderGet is the same as Louder, but pulls fields other than Loudness (i.e. In) from query params instead of POST
	LouderGet(context.Context, *LouderRequest) (*EchoResponse, error)
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedEchoServer) Louder(ctx context.Context, req *LouderRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Louder not implemented")
}
func (*UnimplementedEchoServer) LouderGet(ctx context.Context, req *LouderRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LouderGet not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Louder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LouderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Louder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/Louder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Louder(ctx, req.(*LouderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_LouderGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LouderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).LouderGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/LouderGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).LouderGet(ctx, req.(*LouderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
		{
			MethodName: "Louder",
			Handler:    _Echo_Louder_Handler,
		},
		{
			MethodName: "LouderGet",
			Handler:    _Echo_LouderGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}

func (m *EchoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.In) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEcho(dAtA, i, uint64(len(m.In)))
		i += copy(dAtA[i:], m.In)
	}
	return i, nil
}

func (m *LouderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LouderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.In) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEcho(dAtA, i, uint64(len(m.In)))
		i += copy(dAtA[i:], m.In)
	}
	if m.Loudness != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEcho(dAtA, i, uint64(m.Loudness))
	}
	return i, nil
}

func (m *EchoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Out) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEcho(dAtA, i, uint64(len(m.Out)))
		i += copy(dAtA[i:], m.Out)
	}
	return i, nil
}

func encodeVarintEcho(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EchoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.In)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	return n
}

func (m *LouderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.In)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	if m.Loudness != 0 {
		n += 1 + sovEcho(uint64(m.Loudness))
	}
	return n
}

func (m *EchoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Out)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	return n
}

func sovEcho(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEcho(x uint64) (n int) {
	return sovEcho(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EchoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LouderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LouderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LouderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loudness", wireType)
			}
			m.Loudness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loudness |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Out = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEcho(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEcho
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEcho
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEcho
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEcho(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEcho
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEcho = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEcho   = fmt.Errorf("proto: integer overflow")
)
