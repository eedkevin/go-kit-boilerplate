// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7040e72f5f
// Version Date: 2020-09-19T18:42:02Z

// Package grpc provides a gRPC client for the Account service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/eedkevin/go-kit-boilerplate/account"
	"github.com/eedkevin/go-kit-boilerplate/account/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.AccountServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var statusEndpoint endpoint.Endpoint
	{
		statusEndpoint = grpctransport.NewClient(
			conn,
			"account.Account",
			"Status",
			EncodeGRPCStatusRequest,
			DecodeGRPCStatusResponse,
			pb.StatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var authtokenEndpoint endpoint.Endpoint
	{
		authtokenEndpoint = grpctransport.NewClient(
			conn,
			"account.Account",
			"AuthToken",
			EncodeGRPCAuthTokenRequest,
			DecodeGRPCAuthTokenResponse,
			pb.AuthTokenResponse{},
			clientOptions...,
		).Endpoint()
	}

	var authtokenvalidateEndpoint endpoint.Endpoint
	{
		authtokenvalidateEndpoint = grpctransport.NewClient(
			conn,
			"account.Account",
			"AuthTokenValidate",
			EncodeGRPCAuthTokenValidateRequest,
			DecodeGRPCAuthTokenValidateResponse,
			pb.AuthTokenValidateResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		StatusEndpoint:            statusEndpoint,
		AuthTokenEndpoint:         authtokenEndpoint,
		AuthTokenValidateEndpoint: authtokenvalidateEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC status reply to a user-domain status response. Primarily useful in a client.
func DecodeGRPCStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.StatusResponse)
	return reply, nil
}

// DecodeGRPCAuthTokenResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC authtoken reply to a user-domain authtoken response. Primarily useful in a client.
func DecodeGRPCAuthTokenResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.AuthTokenResponse)
	return reply, nil
}

// DecodeGRPCAuthTokenValidateResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC authtokenvalidate reply to a user-domain authtokenvalidate response. Primarily useful in a client.
func DecodeGRPCAuthTokenValidateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.AuthTokenValidateResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain status request to a gRPC status request. Primarily useful in a client.
func EncodeGRPCStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.StatusRequest)
	return req, nil
}

// EncodeGRPCAuthTokenRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain authtoken request to a gRPC authtoken request. Primarily useful in a client.
func EncodeGRPCAuthTokenRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AuthTokenRequest)
	return req, nil
}

// EncodeGRPCAuthTokenValidateRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain authtokenvalidate request to a gRPC authtokenvalidate request. Primarily useful in a client.
func EncodeGRPCAuthTokenValidateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AuthTokenValidateRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
