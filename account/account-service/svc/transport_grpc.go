// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7040e72f5f
// Version Date: 2020-09-19T18:42:02Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "account"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC AccountServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.AccountServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// account

		status: grpctransport.NewServer(
			endpoints.StatusEndpoint,
			DecodeGRPCStatusRequest,
			EncodeGRPCStatusResponse,
			serverOptions...,
		),
		authtoken: grpctransport.NewServer(
			endpoints.AuthTokenEndpoint,
			DecodeGRPCAuthTokenRequest,
			EncodeGRPCAuthTokenResponse,
			serverOptions...,
		),
		authtokenvalidate: grpctransport.NewServer(
			endpoints.AuthTokenValidateEndpoint,
			DecodeGRPCAuthTokenValidateRequest,
			EncodeGRPCAuthTokenValidateResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the AccountServer interface
type grpcServer struct {
	status            grpctransport.Handler
	authtoken         grpctransport.Handler
	authtokenvalidate grpctransport.Handler
}

// Methods for grpcServer to implement AccountServer interface

func (s *grpcServer) Status(ctx context.Context, req *pb.StatusRequest) (*pb.StatusResponse, error) {
	_, rep, err := s.status.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.StatusResponse), nil
}

func (s *grpcServer) AuthToken(ctx context.Context, req *pb.AuthTokenRequest) (*pb.AuthTokenResponse, error) {
	_, rep, err := s.authtoken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.AuthTokenResponse), nil
}

func (s *grpcServer) AuthTokenValidate(ctx context.Context, req *pb.AuthTokenValidateRequest) (*pb.AuthTokenValidateResponse, error) {
	_, rep, err := s.authtokenvalidate.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.AuthTokenValidateResponse), nil
}

// Server Decode

// DecodeGRPCStatusRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC status request to a user-domain status request. Primarily useful in a server.
func DecodeGRPCStatusRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.StatusRequest)
	return req, nil
}

// DecodeGRPCAuthTokenRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC authtoken request to a user-domain authtoken request. Primarily useful in a server.
func DecodeGRPCAuthTokenRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.AuthTokenRequest)
	return req, nil
}

// DecodeGRPCAuthTokenValidateRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC authtokenvalidate request to a user-domain authtokenvalidate request. Primarily useful in a server.
func DecodeGRPCAuthTokenValidateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.AuthTokenValidateRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCStatusResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain status response to a gRPC status reply. Primarily useful in a server.
func EncodeGRPCStatusResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.StatusResponse)
	return resp, nil
}

// EncodeGRPCAuthTokenResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain authtoken response to a gRPC authtoken reply. Primarily useful in a server.
func EncodeGRPCAuthTokenResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.AuthTokenResponse)
	return resp, nil
}

// EncodeGRPCAuthTokenValidateResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain authtokenvalidate response to a gRPC authtokenvalidate reply. Primarily useful in a server.
func EncodeGRPCAuthTokenValidateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.AuthTokenValidateResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
