// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geo.proto

package geo

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServiceStatus int32

const (
	ServiceStatus_FAIL ServiceStatus = 0
	ServiceStatus_OK   ServiceStatus = 1
)

var ServiceStatus_name = map[int32]string{
	0: "FAIL",
	1: "OK",
}

var ServiceStatus_value = map[string]int32{
	"FAIL": 0,
	"OK":   1,
}

func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}

func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{0}
}

type GeoCoordinate struct {
	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float32 `protobuf:"fixed32,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *GeoCoordinate) Reset()         { *m = GeoCoordinate{} }
func (m *GeoCoordinate) String() string { return proto.CompactTextString(m) }
func (*GeoCoordinate) ProtoMessage()    {}
func (*GeoCoordinate) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{0}
}
func (m *GeoCoordinate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoCoordinate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoCoordinate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoCoordinate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoCoordinate.Merge(m, src)
}
func (m *GeoCoordinate) XXX_Size() int {
	return m.Size()
}
func (m *GeoCoordinate) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoCoordinate.DiscardUnknown(m)
}

var xxx_messageInfo_GeoCoordinate proto.InternalMessageInfo

func (m *GeoCoordinate) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *GeoCoordinate) GetLng() float32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type StatusRequest struct {
	Full bool `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{1}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

type StatusResponse struct {
	Status ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=geo.ServiceStatus" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{2}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_FAIL
}

type DistanceRequest struct {
	Origin      *GeoCoordinate `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Destination *GeoCoordinate `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (m *DistanceRequest) Reset()         { *m = DistanceRequest{} }
func (m *DistanceRequest) String() string { return proto.CompactTextString(m) }
func (*DistanceRequest) ProtoMessage()    {}
func (*DistanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{3}
}
func (m *DistanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistanceRequest.Merge(m, src)
}
func (m *DistanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DistanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DistanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DistanceRequest proto.InternalMessageInfo

func (m *DistanceRequest) GetOrigin() *GeoCoordinate {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *DistanceRequest) GetDestination() *GeoCoordinate {
	if m != nil {
		return m.Destination
	}
	return nil
}

type DistanceResponse struct {
	Distance int32 `protobuf:"varint,1,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (m *DistanceResponse) Reset()         { *m = DistanceResponse{} }
func (m *DistanceResponse) String() string { return proto.CompactTextString(m) }
func (*DistanceResponse) ProtoMessage()    {}
func (*DistanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_363b5540e34010f3, []int{4}
}
func (m *DistanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistanceResponse.Merge(m, src)
}
func (m *DistanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *DistanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DistanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DistanceResponse proto.InternalMessageInfo

func (m *DistanceResponse) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func init() {
	proto.RegisterEnum("geo.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
	proto.RegisterType((*GeoCoordinate)(nil), "geo.GeoCoordinate")
	proto.RegisterType((*StatusRequest)(nil), "geo.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "geo.StatusResponse")
	proto.RegisterType((*DistanceRequest)(nil), "geo.DistanceRequest")
	proto.RegisterType((*DistanceResponse)(nil), "geo.DistanceResponse")
}

func init() { proto.RegisterFile("geo.proto", fileDescriptor_363b5540e34010f3) }

var fileDescriptor_363b5540e34010f3 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xd3, 0xc9, 0x3a, 0x26, 0xb5, 0x24, 0x1b, 0xda, 0x15, 0x42, 0x0e, 0x83, 0x8e, 0x17,
	0xc9, 0x61, 0x06, 0x76, 0x3d, 0x89, 0x17, 0xd7, 0x3f, 0x8b, 0xa8, 0x08, 0xb3, 0x4f, 0xd0, 0x9b,
	0xa9, 0xed, 0x6d, 0x98, 0xed, 0x8a, 0xdd, 0x35, 0x0b, 0x5e, 0x7d, 0x02, 0xc1, 0x8b, 0x8f, 0xe4,
	0x71, 0xc1, 0x8b, 0x47, 0x49, 0x7c, 0x10, 0x49, 0xa7, 0x47, 0x37, 0xc1, 0x5b, 0xcf, 0xc7, 0xef,
	0xab, 0xef, 0xab, 0x62, 0x60, 0xa0, 0x91, 0xf2, 0x85, 0x23, 0x26, 0xd9, 0xd3, 0x48, 0xd3, 0x57,
	0xda, 0xf0, 0x65, 0x73, 0x9e, 0xcf, 0xe9, 0xaa, 0xb8, 0x42, 0x56, 0xd7, 0xe8, 0x3c, 0x16, 0xec,
	0x1a, 0xef, 0x8b, 0x0a, 0x2f, 0xd8, 0x21, 0x16, 0x9a, 0x48, 0xd7, 0xc8, 0x97, 0xc6, 0x55, 0x0b,
	0xe5, 0xf8, 0x53, 0xa1, 0xac, 0x25, 0x56, 0x6c, 0xc8, 0xfa, 0xcd, 0xac, 0xec, 0x18, 0x86, 0xa7,
	0x48, 0x2f, 0x88, 0x5c, 0x65, 0xac, 0x62, 0x94, 0x63, 0xe8, 0xd5, 0x8a, 0x27, 0xe2, 0x81, 0x78,
	0xdc, 0x2d, 0xd7, 0xcf, 0xa0, 0x58, 0x3d, 0xe9, 0x46, 0xc5, 0xea, 0xec, 0x11, 0x0c, 0xcf, 0x58,
	0x71, 0xe3, 0x4b, 0xfc, 0xd8, 0xa0, 0x67, 0x29, 0x61, 0xef, 0xa2, 0xa9, 0xeb, 0xe0, 0xea, 0x97,
	0xe1, 0x9d, 0x3d, 0x83, 0x51, 0x0b, 0xf9, 0x05, 0x59, 0x8f, 0x72, 0x06, 0x89, 0x0f, 0x4a, 0xe0,
	0x46, 0x47, 0x32, 0x5f, 0xef, 0x74, 0x86, 0xee, 0xda, 0xcc, 0x31, 0xb2, 0x91, 0xc8, 0x3c, 0x1c,
	0xbc, 0x34, 0x9e, 0x95, 0x9d, 0x63, 0x1b, 0x32, 0x83, 0x84, 0x9c, 0xd1, 0xc6, 0x06, 0xfb, 0x7e,
	0xb4, 0x6f, 0xb5, 0x2f, 0x23, 0x21, 0x9f, 0xc0, 0x7e, 0x85, 0x9e, 0xd7, 0xa2, 0x21, 0x1b, 0xba,
	0xff, 0xdf, 0x70, 0x1b, 0xcb, 0x72, 0x18, 0xff, 0x0b, 0x8d, 0xa5, 0xa7, 0xd0, 0xaf, 0xa2, 0x16,
	0x72, 0xef, 0x94, 0x7f, 0xbf, 0x67, 0x0f, 0x61, 0xb8, 0xd5, 0x5e, 0xf6, 0x61, 0xef, 0xf5, 0xf3,
	0x37, 0xef, 0xc6, 0x1d, 0x99, 0x40, 0xf7, 0xc3, 0xdb, 0xb1, 0x38, 0xfa, 0x26, 0xa0, 0x77, 0x8a,
	0x24, 0x4f, 0x20, 0x89, 0x4c, 0xdc, 0xfa, 0xf6, 0xfd, 0xa6, 0xf7, 0xb6, 0xb4, 0x4d, 0x72, 0x76,
	0xf0, 0xf9, 0xc7, 0xef, 0xaf, 0xdd, 0x81, 0xbc, 0x5b, 0x6c, 0x6e, 0x22, 0xdf, 0x43, 0xbf, 0xad,
	0x27, 0x0f, 0x83, 0x63, 0xe7, 0x44, 0xd3, 0xfb, 0x3b, 0x6a, 0x9c, 0x74, 0x18, 0x26, 0x8d, 0xb2,
	0x41, 0xd1, 0x56, 0x7f, 0x2a, 0x66, 0x27, 0x93, 0xef, 0xcb, 0x54, 0xdc, 0x2c, 0x53, 0xf1, 0x6b,
	0x99, 0x8a, 0x2f, 0xab, 0xb4, 0x73, 0xb3, 0x4a, 0x3b, 0x3f, 0x57, 0x69, 0xe7, 0x3c, 0x09, 0xff,
	0xc6, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x34, 0x42, 0x78, 0x74, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeoClient is the client API for Geo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Distance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error)
}

type geoClient struct {
	cc *grpc.ClientConn
}

func NewGeoClient(cc *grpc.ClientConn) GeoClient {
	return &geoClient{cc}
}

func (c *geoClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/geo.Geo/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoClient) Distance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error) {
	out := new(DistanceResponse)
	err := c.cc.Invoke(ctx, "/geo.Geo/Distance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoServer is the server API for Geo service.
type GeoServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Distance(context.Context, *DistanceRequest) (*DistanceResponse, error)
}

// UnimplementedGeoServer can be embedded to have forward compatible implementations.
type UnimplementedGeoServer struct {
}

func (*UnimplementedGeoServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedGeoServer) Distance(ctx context.Context, req *DistanceRequest) (*DistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distance not implemented")
}

func RegisterGeoServer(s *grpc.Server, srv GeoServer) {
	s.RegisterService(&_Geo_serviceDesc, srv)
}

func _Geo_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.Geo/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geo_Distance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServer).Distance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.Geo/Distance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServer).Distance(ctx, req.(*DistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Geo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geo.Geo",
	HandlerType: (*GeoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Geo_Status_Handler,
		},
		{
			MethodName: "Distance",
			Handler:    _Geo_Distance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo.proto",
}

func (m *GeoCoordinate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoCoordinate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lat != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lat))))
		i += 4
	}
	if m.Lng != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lng))))
		i += 4
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Full {
		dAtA[i] = 0x8
		i++
		if m.Full {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGeo(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *DistanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistanceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Origin != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeo(dAtA, i, uint64(m.Origin.Size()))
		n1, err1 := m.Origin.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Destination != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGeo(dAtA, i, uint64(m.Destination.Size()))
		n2, err2 := m.Destination.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *DistanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistanceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Distance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGeo(dAtA, i, uint64(m.Distance))
	}
	return i, nil
}

func encodeVarintGeo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GeoCoordinate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 5
	}
	if m.Lng != 0 {
		n += 5
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Full {
		n += 2
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovGeo(uint64(m.Status))
	}
	return n
}

func (m *DistanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovGeo(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovGeo(uint64(l))
	}
	return n
}

func (m *DistanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Distance != 0 {
		n += 1 + sovGeo(uint64(m.Distance))
	}
	return n
}

func sovGeo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGeo(x uint64) (n int) {
	return sovGeo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GeoCoordinate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoCoordinate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoCoordinate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lat = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lng = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Full", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Full = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ServiceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &GeoCoordinate{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &GeoCoordinate{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			m.Distance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGeo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGeo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGeo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeo   = fmt.Errorf("proto: integer overflow")
)
